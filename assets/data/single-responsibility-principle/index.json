{"hash":"5f436540b380eb5bf5ec7251b7b442898069516b","data":{"post":{"title":"Single Responsibility Principle in JavaScript","date":"January 4, 2020","content":"<p>In this series of Blog Posts, I will take a look at SOLID Principles in the context of JavaScript and TypeScript.</p>\n<p><strong>SOLID</strong> is an acronym referring to the SOLID Principles of class design that were\npopularized by Robert C. Martin.</p>\n<p>Usually, these principles get applied to OOP languages that have classes. JavaScript is different in that it uses prototypal\ninheritance instead of classical inheritance. In the code samples, I will be\nusing ES6 classes because I prefer the new syntax over the ES5 syntax.</p>\n<h2 id=\"the-single-responsibility-principle\"><a href=\"#the-single-responsibility-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>THE SINGLE RESPONSIBILITY PRINCIPLE</h2>\n<blockquote>\n<p>\"A class should have one, and only one, reason to change\"<br>\n<strong>Robert C. Martin</strong></p>\n</blockquote>\n<p>The word <strong>\"class\"</strong> here can also be replaced by <strong>\"module\"</strong>, the point is that the\nSingle Responsibility Principle (SRP) is not limited to object-oriented design.</p>\n<p>The best way to understand the SRP is to look at some examples of code that\nviolates this rule.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #616E88\">/* Bad example */</span></span>\n\n<span class=\"line\"><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Employee</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">calculatePay</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">    </span><span style=\"color: #616E88\">//...</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">reportHours</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">    </span><span style=\"color: #616E88\">//...</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">saveToDB</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">    </span><span style=\"color: #616E88\">//...</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<p>This class violates the SRP because it has more that one reason to change.</p>\n<p>Let's say that we wanted to change the <strong>reportHours</strong> method. To do this we\nhave to change the code inside the <strong>Employee</strong> class, which means that we\ncould potentially break some of the other methods in our class.</p>\n<p>If you think about it, it makes no sense. Why should we be able to break\nsomething that does not need to change?</p>\n<p>This is where the SRP is important, it\nensures that there is only <strong>\"one reason to change\"</strong>. Robert C. Martin defines\n<strong>\"only one reason to change\"</strong> as <strong>\"should only be responsible to one\"</strong>. In this\ncase, this means that the Employee class should be split up into smaller\nclasses.</p>\n<p><strong>This does not mean that the Employee class should only have one method, it can\nhave many methods but it should only have one reason to change.</strong></p>\n","tags":[{"title":"JavaScript","path":"/tag/JavaScript/"},{"title":"Software Design","path":"/tag/Software%20Design/"}]}},"context":{}}