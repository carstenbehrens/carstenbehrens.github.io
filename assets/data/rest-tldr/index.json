{"hash":"8d284f39b8f7fd6ee6e44c532e30c7955b76a86b","data":{"post":{"title":"REST - Representational State Transfer","date":"July 8, 2020","content":"<h2 id=\"tldr\"><a href=\"#tldr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TLDR</h2>\n<p>Usually, when people speak about REST APIs they mean a web API that uses\nthe HTTP request methods (POST, GET, PUT, DELETE, etc.) to modify or access the\nstate of a resource.</p>\n<p>Individual resources are identified using URIs.</p>\n<p>For example, a list of all users:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">https://webservice.com/api/users</span></span></code></pre>\n<p>and the user with the id 3049485:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">https://webservice.com/api/users/3049485</span></span></code></pre>\n<p>Now with REST you usually use one of the HTTP methods on the resource you want to modify/access.</p>\n<p>For example, you could use the DELETE request method somewhere in your client to delete the individual user like this:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">res</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">await</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">axios</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">method</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">delete</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">url</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">`</span><span style=\"color: #A3BE8C\">api/user/3049485</span><span style=\"color: #ECEFF4\">`</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></span></code></pre>\n<p>That's it for the TLDR. If you want a more in-depth explanation of REST\nkeep reading below.</p>\n<h2 id=\"rest\"><a href=\"#rest\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>REST</h2>\n<p>REST is an acronym for <strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer.</p>\n<p>REST is a software architectural style that defines a set of\nrules that can be used for designing web APIs.</p>\n<p>When an API follows the six constraints that define REST, then this API\ncan be called <strong>RESTful</strong>.</p>\n<p>Here are the six rules:</p>\n<h2 id=\"1-client-server-architecture\"><a href=\"#1-client-server-architecture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Client-server architecture</h2>\n<p>Client and Server should be separated. By keeping the user interface and the backend\nseparated, we improve the portability of the user interface across multiple platforms and improve scalability by simplifying the server components.</p>\n<h2 id=\"2-stateless\"><a href=\"#2-stateless\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Stateless</h2>\n<p>Communication must be stateless. This means that the server does not\nstore any session data. For example, the server <strong>does not know</strong> if a user\nis logged in. It <strong>does not know</strong> what the last request of a user was.</p>\n<p>The server only knows the information that is contained\nin the current request.</p>\n<h2 id=\"3-cache\"><a href=\"#3-cache\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Cache</h2>\n<p>Every response must be labeled as cacheable or non-cacheable. If a response\nis cacheable, then a client cache is given the right to reuse that response laster.</p>\n<h2 id=\"4-uniform-interface\"><a href=\"#4-uniform-interface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Uniform Interface</h2>\n<p>The central feature that distinguishes REST architectural style from other\nnetwork-based styles is its emphasis on a uniform interface between components.</p>\n<h3 id=\"resource-identification-in-requests\"><a href=\"#resource-identification-in-requests\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resource identification in requests</h3>\n<p>Individual resources are identified in requests using URI's.</p>\n<p>For example, a list of all users:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">https://webservice.com/api/users</span></span></code></pre>\n<p>and the user with the id 3049485:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">https://webservice.com/api/users/3049485</span></span></code></pre>\n<p>In this example, the resource <strong>user</strong> is identified with the id\n<strong>3049485</strong> in the request.</p>\n<h3 id=\"resource-manipulation-through-representations\"><a href=\"#resource-manipulation-through-representations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resource manipulation through representations</h3>\n<p>When a client gets the current state of a resource (representation) it has enough\ninformation to modify or delete the resource.</p>\n<p>For example, you get the user from the API like this:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">https://webservice.com/api/users/3049485</span></span></code></pre>\n<p>This should now give you all the information to modify or delete the user.\nIn this case, the API should return all the information about the user.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">id</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">3049485</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">type</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">user</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">username</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">luke123</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">age</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">22</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">gender</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">male</span><span style=\"color: #ECEFF4\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<h3 id=\"self-descriptive-messages\"><a href=\"#self-descriptive-messages\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Self-descriptive messages</h3>\n<p>A self-descriptive message is one that contains all\nthe information that the recipient needs to understand it.</p>\n<p>In case of a web API, the API returns the Media-Type in the Response\nHeader</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">Content-Type: application/json</span></span></code></pre>\n<p>Now the client knows it must parse the JSON that gets returned from the API.</p>\n<h3 id=\"hypermedia-as-the-engine-of-application-state-hateoas\"><a href=\"#hypermedia-as-the-engine-of-application-state-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Hypermedia as the engine of application state (HATEOAS)</h3>\n<p>This is where most web APIs fail to follow the constraints of REST.\nAccording to this constraint, the API should behave similarly to a website.</p>\n<p>The API should return Links that would allow a REST client to be able to\ndynamically discover all the available resources it needs.</p>\n<p>For example, you get the user from the API like this:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #d8dee9ff\">https://webservice.com/api/users/3049485</span></span></code></pre>\n<p>The API should then provide you with links for all other actions on that resource.</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">username</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">luke123</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">age</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">22</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">gender</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">male</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">links</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">friends</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">/users/3049485/friends</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">wife</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">/users/3049485/wife</span><span style=\"color: #ECEFF4\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<p>Now let's say luke does not have friends - I know it's sad - what would the\nresponse then look like?</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">username</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">luke123</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">age</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">22</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">gender</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">male</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">links</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #8FBCBB\">wife</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">/users/3049485/wife</span><span style=\"color: #ECEFF4\">&quot;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<p>The link to \"friends\" is missing because what actions wich are possible varies\non the state of the resource.</p>\n<p>Also, JSON does not support any links out of the box, and we need\nto inform the client otherwise - e.g. with documentation - how to use the links.</p>\n<p>According to the REST definition, this feature should be defined in the media type itself,\nand not by documentation.</p>\n<p>You can see that 99% of APIs are not following this constraint and are therefore\nnot REST APIs according to the definition of Roy Fielding.</p>\n<p>You could call these APIs RESTish or REST without HATEOAS.</p>\n","tags":[{"title":"JavaScript","path":"/tag/JavaScript/"},{"title":"REST","path":"/tag/REST/"},{"title":"Backend","path":"/tag/Backend/"}]}},"context":{}}