{"hash":"bb7614b51e1677ad8e87a3127852889df016138e","data":{"post":{"title":"Interface Segregation Principle in JavaScript and TypeScript","date":"January 8, 2020","content":"<p>In this series of Blog Posts, I will take a look at SOLID Principles in the context of JavaScript and TypeScript.</p>\n<p><strong>SOLID</strong> is an acronym referring to the SOLID Principles of class design that were\npopularized by Robert C. Martin.</p>\n<p>Usually, these principles get applied to OOP languages that have classes. JavaScript is different in that it uses prototypal\ninheritance instead of classical inheritance. In the code samples, I will be\nusing ES6 classes because I prefer the new syntax over the ES5 syntax.</p>\n<h2 id=\"the-interface-segregation-principle\"><a href=\"#the-interface-segregation-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>THE INTERFACE SEGREGATION PRINCIPLE</h2>\n<p>The ISP states that no client should be forced to depend on methods it does not\nuse.</p>\n<blockquote>\n<p>Make fine grained interfaces that are client specific.\nClients should not be forced to implement interfaces they do not use.\n<strong>Robert C. Martin</strong></p>\n</blockquote>\n<p>\"Client\" in this case means the implementing class of an interface. No worries\nif you don't know what an interface is, I'll explain it below.</p>\n<p>This means that the methods of a large interface can be broken up\ninto groups of methods. If a client does not need a method then the client\nshould not know about the method / should not have to implement it.</p>\n<blockquote>\n<p>ISP acknowledges that there are objects that require noncohesive interfaces;\nhowever, it suggests that clients should not know about them as a single\nclass. Instead, clients should know about abstract base classes that have\nhave cohesive interfaces.\n<strong>Robert C. Martin</strong></p>\n</blockquote>\n<h2 id=\"what-is-an-interface-anyway\"><a href=\"#what-is-an-interface-anyway\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is an interface anyway</h2>\n<p>The general definition of an interface:</p>\n<blockquote>\n<p>A situation, way, or place where two things come together and affect each other\n<strong>Cambridge Dictionary</strong></p>\n</blockquote>\n<p>In object oriented programming Interface can mean a few different things.</p>\n<p>In general, the word interface is used to define an abstract class that contains no data but\ndefines properties and methods of a class.</p>\n<p>Interface is also the keyword that is used in Java, C#, Typescript and other\nprogramming languages, so in the context of those languages the word interface\nis synonymously used to describe the language-specific type of interface.</p>\n<p>Interfaces in C# and Java get often used to enforce that a class meets a particular\ncontract.</p>\n<p>The word interface is also often used to describe the public methods and properties of a class.</p>\n<p><strong>Confused yet?</strong></p>\n<p>As there is no interface language feature in JavaScript I will be using Typescript\nto further explain this principle.</p>\n<p>In Typescript an interface would look like this:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #81A1C1\">interface</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Vehicle</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  make</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  numberOfWheels</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  maxSpeed</span><span style=\"color: #81A1C1\">?:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">getReachKm</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">fuel</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">kmPerLitre</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<p>A class having code and data for all the methods corresponding to that interface\nand declaring so is said to implement that interface.</p>\n<p>In Typescript an implementation of the Vehicle interface could look like this:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Car</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">implements</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Vehicle</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  make</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">string</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  numberOfWheels</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  maxSpeed</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #81A1C1\">;</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #81A1C1\">constructor</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">make</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">numberOfWheels</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">maxSpeed</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">make</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">make</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">numberOfWheels</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">numberOfWheels</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #D8DEE9\">maxSpeed</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">maxSpeed</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">getReachKm</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">fuel</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">kmPerLitre</span><span style=\"color: #81A1C1\">:</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">fuel</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">*</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">kmPerLitre</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">carObj</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">new</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">Car</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #A3BE8C\">BMW</span><span style=\"color: #ECEFF4\">&quot;</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">4</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">240</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></span></code></pre>\n<h2 id=\"example\"><a href=\"#example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Example</h2>\n<p>In the above example, we only implemented the Vehicle interface with the Car class.\nBut what would happen if we also needed to implement a AutonomousCar class?\nObviously, our Vehicle interface would need some extra properties.</p>\n<p>Let's say, for the sake of example, that we needed 20 new methods that are exclusively\nused by autonomous cars. In this situation, we should segregate the interface\ninto smaller interfaces that are more client specific.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 571 141' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9ed7802772bf5bda88e3d51c9eb2a2a9'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9ed7802772bf5bda88e3d51c9eb2a2a9)' width='571' height='141' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAQAEADASIAAhEBAxEB/8QAGQABAAIDAAAAAAAAAAAAAAAABQMEAgYI/8QAJhAAAgEDAwMEAwAAAAAAAAAAAQIDAAQRBRIhEyJBMVFhcQYUkf/EABQBAQAAAAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oADAMBAAIRAxEAPwDqmo2niUkNLGCPUFhR2o6jJZSCMK8shGQFgYr9ZBo2x1qZE2Tw3AXubd%2buW%2bccUDc8kZlV0eB%2b3bhnA80VrVrFewhmNvG6c7lcEke3I%2baajaQT7HZWBXdwuPP3U9APYRR2VusSC1Yj1YuAW%2bcYq9bSxIrbpYVLMWwrjAq1R19qEVkhlu7mK3i6nTBdSef7QXkljc4SRGPsGBrOtSm/JbdrqJ47%2bz6asQO7G7IxyD7UtpmsW%2boydK0voJJgpZkVDkYIB8%2bCQKD/2Q==' /%3e%3c/svg%3e\" width=\"571\" alt=\"diagram\" data-srcset=\"/assets/static/diagram.7845b04.7a7e0cf27d00891874fc6c5751a2e442.jpg 571w\" data-sizes=\"(max-width: 571px) 100vw, 571px\" data-src=\"/assets/static/diagram.7845b04.7a7e0cf27d00891874fc6c5751a2e442.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/diagram.7845b04.7a7e0cf27d00891874fc6c5751a2e442.jpg\" width=\"571\" alt=\"diagram\"></noscript></p>\n<p>As a result, we promote decoupling and possibly reduce side effects.</p>\n","tags":[{"title":"JavaScript","path":"/tag/JavaScript/"},{"title":"Software Design","path":"/tag/Software%20Design/"}]}},"context":{}}