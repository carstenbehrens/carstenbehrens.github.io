{"hash":"89052a63f47190f5c3fef48afac4280b45fc0b09","data":{"post":{"title":"RegEx Basics Cheat Sheet","date":"March 10, 2025","content":"<h1 id=\"regular-expressions-regex-cheat-sheet\"><a href=\"#regular-expressions-regex-cheat-sheet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Regular Expressions (Regex) Cheat Sheet</h1>\n<h2 id=\"1-basic-matching\"><a href=\"#1-basic-matching\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Basic Matching</h2>\n<h3 id=\"11-explicit-characters\"><a href=\"#11-explicit-characters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.1 Explicit Characters</h3>\n<p>Most characters match themselves literally.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/hello/</code></td>\n<td align=\"left\">Matches the exact sequence \"hello\"</td>\n<td align=\"left\">\"hello world\"</td>\n<td align=\"left\">\"Hello\", \"helo\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/123/</code></td>\n<td align=\"left\">Matches the exact sequence \"123\"</td>\n<td align=\"left\">\"abc123xyz\"</td>\n<td align=\"left\">\"12\", \"456\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/Carsten/</code></td>\n<td align=\"left\">Matches the exact sequence of \"Carsten\"</td>\n<td align=\"left\">\"Carsten\" \"Hi, Carsten\"</td>\n<td align=\"left\">\"carsten\", \"Karsten\"</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"12-escaping-special-characters\"><a href=\"#12-escaping-special-characters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.2 Escaping Special Characters</h3>\n<p>Some characters have special meanings in regex (see below). To match them literally, you must <em>escape</em> them with a backslash (<code>\\</code>).</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Special Character</th>\n<th align=\"left\">Meaning in Regex</th>\n<th align=\"left\">Escaped Version</th>\n<th align=\"left\">Matches</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>.</code></td>\n<td align=\"left\">Matches ANY single character (except newline, usually)</td>\n<td align=\"left\"><code>\\.</code></td>\n<td align=\"left\">\".\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">Quantifier (zero or more)</td>\n<td align=\"left\"><code>\\*</code></td>\n<td align=\"left\">\"*\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\">Quantifier (one or more)</td>\n<td align=\"left\"><code>\\+</code></td>\n<td align=\"left\">\"+\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>?</code></td>\n<td align=\"left\">Quantifier (zero or one)</td>\n<td align=\"left\"><code>\\?</code></td>\n<td align=\"left\">\"?\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>[</code></td>\n<td align=\"left\">Start of a character class</td>\n<td align=\"left\"><code>\\[</code></td>\n<td align=\"left\">\"[\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>]</code></td>\n<td align=\"left\">End of a character class</td>\n<td align=\"left\"><code>\\]</code></td>\n<td align=\"left\">\"]\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>(</code></td>\n<td align=\"left\">Start of a capturing group</td>\n<td align=\"left\"><code>\\(</code></td>\n<td align=\"left\">\"(\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>)</code></td>\n<td align=\"left\">End of a capturing group</td>\n<td align=\"left\"><code>\\)</code></td>\n<td align=\"left\">\")\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>{</code></td>\n<td align=\"left\">Start of a quantifier with curly braces</td>\n<td align=\"left\"><code>\\{</code></td>\n<td align=\"left\">\"{\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>}</code></td>\n<td align=\"left\">End of a quantifier with curly braces</td>\n<td align=\"left\"><code>\\}</code></td>\n<td align=\"left\">\"}\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^</code></td>\n<td align=\"left\">Anchor (start of string) or negation (inside <code>[]</code>)</td>\n<td align=\"left\"><code>\\^</code></td>\n<td align=\"left\">\"^\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>$</code></td>\n<td align=\"left\">Anchor (end of string)</td>\n<td align=\"left\"><code>\\$</code></td>\n<td align=\"left\">\"$\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>|</code></td>\n<td align=\"left\">Alternation (OR)</td>\n<td align=\"left\"><code>\\|</code></td>\n<td align=\"left\">\"|\"</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/\\./</code></td>\n<td align=\"left\">Matches a literal dot (<code>.</code>)</td>\n<td align=\"left\">\"a.b\"</td>\n<td align=\"left\">\"ab\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/a\\*b/</code></td>\n<td align=\"left\">Matches \"a\", followed by zero or more \"*\", then \"b\"</td>\n<td align=\"left\">\"ab\", \"a*b\"</td>\n<td align=\"left\">\"acb\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/\\[abc\\]/</code></td>\n<td align=\"left\">Matches the literal string \"[abc]\"</td>\n<td align=\"left\">\"[abc]\"</td>\n<td align=\"left\">\"abc\"</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"13-whitespace-characters\"><a href=\"#13-whitespace-characters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1.3 Whitespace Characters</h3>\n<p>These are special characters that represent whitespace.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Regex</th>\n<th align=\"left\">Whitespace Character</th>\n<th align=\"left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>\\t</code></td>\n<td align=\"left\">Tab</td>\n<td align=\"left\">Matches a horizontal tab character.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\n</code></td>\n<td align=\"left\">Newline</td>\n<td align=\"left\">Matches a line break.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\r</code></td>\n<td align=\"left\">Carriage Return</td>\n<td align=\"left\">Matches a carriage return (less common on Unix).</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\f</code></td>\n<td align=\"left\">Form Feed</td>\n<td align=\"left\">Matches a form feed (rarely used).</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\v</code></td>\n<td align=\"left\">Vertical Tab</td>\n<td align=\"left\">Matches a vertical tab (rarely used).</td>\n</tr>\n<tr>\n<td align=\"left\"><code></code></td>\n<td align=\"left\">Space</td>\n<td align=\"left\">Matches a single space character (explicit).</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2-quantifiers\"><a href=\"#2-quantifiers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Quantifiers</h2>\n<p>Quantifiers specify <em>how many times</em> the preceding element should occur.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Quantifier</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>?</code></td>\n<td align=\"left\">Zero or one (optional)</td>\n<td align=\"left\"><code>/colou?r/</code></td>\n<td align=\"left\">\"color\", \"colour\"</td>\n<td align=\"left\">\"colouur\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\">Zero or more</td>\n<td align=\"left\"><code>/bo*a/</code></td>\n<td align=\"left\">\"ba\", \"boa\", \"booa\"</td>\n<td align=\"left\">\"bca\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\">One or more</td>\n<td align=\"left\"><code>/lo+l/</code></td>\n<td align=\"left\">\"lol\", \"lool\", \"loool\"</td>\n<td align=\"left\">\"ll\", \"lo\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>{n}</code></td>\n<td align=\"left\">Exactly <em>n</em> times</td>\n<td align=\"left\"><code>/a{3}/</code></td>\n<td align=\"left\">\"aaa\"</td>\n<td align=\"left\">\"aa\", \"aaaa\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>{n,}</code></td>\n<td align=\"left\"><em>n</em> or more times</td>\n<td align=\"left\"><code>/a{2,}/</code></td>\n<td align=\"left\">\"aa\", \"aaa\", \"aaaaa\"</td>\n<td align=\"left\">\"a\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>{n,m}</code></td>\n<td align=\"left\">Between <em>n</em> and <em>m</em> times (inclusive)</td>\n<td align=\"left\"><code>/a{1,3}/</code></td>\n<td align=\"left\">\"a\", \"aa\", \"aaa\"</td>\n<td align=\"left\">\"aaaa\"</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples of curly brace quantifiers:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/go{2,4}d/</code></td>\n<td align=\"left\">Matches \"g\", 2-4 \"o\"s, then \"d\"</td>\n<td align=\"left\">\"good\", \"goood\", \"gooood\"</td>\n<td align=\"left\">\"god\", \"goooood\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/20{1,2}/</code></td>\n<td align=\"left\">Matches a 2 followed by one to two zeroes</td>\n<td align=\"left\">\"20\" \"200\"</td>\n<td align=\"left\">\"2\" \"2000\"</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-character-classes-and-groups\"><a href=\"#3-character-classes-and-groups\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Character Classes and Groups</h2>\n<h3 id=\"31-character-sets-\"><a href=\"#31-character-sets-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.1 Character Sets (<code>[]</code>)</h3>\n<p>Character sets match <em>any one</em> of the characters enclosed within the square brackets.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/[abc]/</code></td>\n<td align=\"left\">Matches \"a\", \"b\", or \"c\"</td>\n<td align=\"left\">\"a\", \"b\", \"c\", \"bat\"</td>\n<td align=\"left\">\"d\", \"x\", \" \"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/[aeiou]/</code></td>\n<td align=\"left\">Matches any vowel (lowercase)</td>\n<td align=\"left\">\"a\", \"e\", \"i\", \"apple\"</td>\n<td align=\"left\">\"b\", \"x\", \" \"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/[0-9]/</code></td>\n<td align=\"left\">Matches any digit (equivalent to <code>\\d</code> - see below)</td>\n<td align=\"left\">\"0\", \"5\", \"9\", \"123\"</td>\n<td align=\"left\">\"a\", \"!\", \" \"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/[a-z]/</code></td>\n<td align=\"left\">Matches any lowercase letter (a to z)</td>\n<td align=\"left\">\"a\", \"g\", \"z\", \"cat\"</td>\n<td align=\"left\">\"A\", \"1\", \"!\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/[A-Za-z]/</code></td>\n<td align=\"left\">Matches any uppercase or lowercase letter</td>\n<td align=\"left\">\"a\", \"G\", \"z\", \"Cat\"</td>\n<td align=\"left\">\"1\", \"!\", \" \"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/[0-9a-fA-F]/</code></td>\n<td align=\"left\">Matches a character, any hexadecimal digit (case-insensitive)</td>\n<td align=\"left\">\"0\", \"a\", \"F\", \"B2\"</td>\n<td align=\"left\">\"g\", \"X\", \" \"</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"32-negated-character-sets-\"><a href=\"#32-negated-character-sets-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.2 Negated Character Sets (<code>[^]</code>)</h3>\n<p>Adding a caret (<code>^</code>) <em>immediately after</em> the opening bracket negates the set, meaning it matches any character <em>except</em> those within the brackets.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/[^abc]/</code></td>\n<td align=\"left\">Matches any character <em>except</em> \"a\", \"b\", or \"c\"</td>\n<td align=\"left\">\"d\", \"x\", \" \", \"1\"</td>\n<td align=\"left\">\"a\", \"b\", \"c\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/[^0-9]/</code></td>\n<td align=\"left\">Matches any character that is <em>not</em> a digit (like <code>\\D</code>)</td>\n<td align=\"left\">\"a\", \"!\", \" \"</td>\n<td align=\"left\">\"0\", \"5\", \"9\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/[^ \\t\\n]/</code></td>\n<td align=\"left\">Matches anything that is not a space, a tab or a newline</td>\n<td align=\"left\">\"c\", \"d\", \"1\"</td>\n<td align=\"left\">\" \", \"\\n\", \"\\t\"</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"33-character-classes-shorthands\"><a href=\"#33-character-classes-shorthands\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.3 Character Classes (Shorthands)</h3>\n<p>These are convenient shorthands for common character sets.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Class</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Equivalent Character Set</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>\\d</code></td>\n<td align=\"left\">Digit</td>\n<td align=\"left\"><code>[0-9]</code></td>\n<td align=\"left\">\"0\", \"5\", \"9\"</td>\n<td align=\"left\">\"a\", \"!\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\D</code></td>\n<td align=\"left\">Non-digit</td>\n<td align=\"left\"><code>[^0-9]</code></td>\n<td align=\"left\">\"a\", \"!\", \" \"</td>\n<td align=\"left\">\"0\", \"5\", \"9\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\w</code></td>\n<td align=\"left\">Word character (alphanumeric + underscore)</td>\n<td align=\"left\"><code>[a-zA-Z0-9_]</code></td>\n<td align=\"left\">\"a\", \"5\", \"_\"</td>\n<td align=\"left\">\"!\", \" \"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\W</code></td>\n<td align=\"left\">Non-word character</td>\n<td align=\"left\"><code>[^a-zA-Z0-9_]</code></td>\n<td align=\"left\">\"!\", \" \", \"-\"</td>\n<td align=\"left\">\"a\", \"5\", \"_\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\s</code></td>\n<td align=\"left\">Whitespace character (space, tab, newline, etc.)</td>\n<td align=\"left\"><code>[ \\t\\r\\n\\f\\v]</code></td>\n<td align=\"left\">\" \", \"\\t\", \"\\n\"</td>\n<td align=\"left\">\"a\", \"1\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>\\S</code></td>\n<td align=\"left\">Non-whitespace character</td>\n<td align=\"left\"><code>[^ \\t\\r\\n\\f\\v]</code></td>\n<td align=\"left\">\"a\", \"1\", \"!\"</td>\n<td align=\"left\">\" \", \"\\t\", \"\\n\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>.</code></td>\n<td align=\"left\">Any character (except newline, usually)</td>\n<td align=\"left\">(Almost everything)</td>\n<td align=\"left\">\"a\", \"!\", \"1\"</td>\n<td align=\"left\">(Newline)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"34-word-boundary-b-and-b\"><a href=\"#34-word-boundary-b-and-b\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3.4 Word Boundary (<code>\\b</code> and <code>\\B</code>)</h3>\n<p><code>\\b</code> matches a word boundary. This is a <em>zero-width assertion</em>, meaning it doesn't consume characters, but rather asserts a position.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches (bold)</th>\n<th align=\"left\">Does NOT Match (no bold)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/\\bcat\\b/</code></td>\n<td align=\"left\">Matches \"cat\" as a whole word</td>\n<td align=\"left\">\"<strong>cat</strong>\", \"a <strong>cat</strong>\", \" <strong>cat</strong>!\"</td>\n<td align=\"left\">\"scatter\", \"bobcat\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/\\bcat/</code></td>\n<td align=\"left\">Matches \"cat\" at the beginning of a word</td>\n<td align=\"left\">\"<strong>cat</strong>alog\", \"a <strong>cat</strong>\", \" <strong>cat</strong>!\"</td>\n<td align=\"left\">\"scatter\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/cat\\b/</code></td>\n<td align=\"left\">Matches \"cat\" at the end of a word</td>\n<td align=\"left\">\"bob<strong>cat</strong>\", \"a <strong>cat</strong>\", \"!<strong>cat</strong>\"</td>\n<td align=\"left\">\"catalog\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/\\Bcat\\B/</code></td>\n<td align=\"left\">Matches \"cat\" <em>not</em> at a word boundary. <code>\\B</code> is the opposite of <code>\\b</code>.</td>\n<td align=\"left\">s<strong>cat</strong>ter</td>\n<td align=\"left\">\"cat\", \"a cat\", \" cat!\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/\\Bcat/</code></td>\n<td align=\"left\">Matches cat when it is not the beginning of a word.</td>\n<td align=\"left\">s<strong>cat</strong>ter</td>\n<td align=\"left\">\"cat\", \"a cat\", \" cat!\"</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4-grouping-and-alternation\"><a href=\"#4-grouping-and-alternation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Grouping and Alternation</h2>\n<h3 id=\"41-capturing-groups-\"><a href=\"#41-capturing-groups-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4.1 Capturing Groups <code>(...)</code></h3>\n<p>Parentheses create <em>capturing groups</em>.  This has two main purposes:</p>\n<ol>\n<li><strong>Grouping:</strong> Apply quantifiers to a whole group, not just a single character.</li>\n<li><strong>Capturing:</strong>  The matched text within the group can be accessed later (backreferences, or in programming languages).</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Group 1 Contents (if matched)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/(ab)+/</code></td>\n<td align=\"left\">Matches one or more repetitions of \"ab\"</td>\n<td align=\"left\">\"ab\", \"abab\", etc.</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/(\\w+)\\s(\\w+)/</code></td>\n<td align=\"left\">Matches two words separated by whitespace; captures each word as a separate group</td>\n<td align=\"left\">First word, Second word</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/(https?):\\/\\/(www\\.\\w+\\.\\w+)/</code></td>\n<td align=\"left\">Captures the protocol http or https and the domain</td>\n<td align=\"left\">\"http\", \"https\", and the domain like \"www.example.com\"</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"42-non-capturing-groups-\"><a href=\"#42-non-capturing-groups-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4.2 Non-Capturing Groups <code>(?:...)</code></h3>\n<p>Sometimes you want to group, but <em>don't</em> need to capture the matched text.  Use <code>(?:...)</code> for this.  This improves performance slightly.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Group 1 Contents</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/(?:https?):\\/\\/(www\\.\\w+\\.\\w+)/</code></td>\n<td align=\"left\">Matches the same as above, but the protocol (\"http://\" or \"<a href=\"https://%22\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://\"</a>) is <em>not</em> captured as a separate group.</td>\n<td align=\"left\">The domain</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"43-backreferences-1-2-etc\"><a href=\"#43-backreferences-1-2-etc\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4.3 Backreferences (<code>\\1</code>, <code>\\2</code>, etc.)</h3>\n<p>Backreferences refer to the text captured by a previous capturing group.  <code>\\1</code> refers to the first group, <code>\\2</code> to the second, and so on.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/(a)(b)\\1\\2/</code></td>\n<td align=\"left\">Matches \"a\", then \"b\", then \"a\" again (from group 1), then \"b\" again (from group 2).</td>\n<td align=\"left\">\"abab\"</td>\n<td align=\"left\">\"abba\", \"abcd\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/(cat\\|dog) is \\1/</code></td>\n<td align=\"left\">Matches a string where \"cat\" or \"dog\" is repeated, e.g. \"cat is cat\" or \"dog is dog\", with proper backreference</td>\n<td align=\"left\">\"cat is cat\", \"dog is dog\"</td>\n<td align=\"left\">\"cat is dog\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&#x3C;([a-z]+)>.+&#x3C;\\/\\1></code></td>\n<td align=\"left\">Matches basic HTML tags. Captures tag name, then matches content and closing tag.</td>\n<td align=\"left\"><code>&#x3C;p>text&#x3C;/p></code>, <code>&#x3C;b>bold&#x3C;/b></code></td>\n<td align=\"left\"><code>&#x3C;p>text&#x3C;/b></code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"44-alternation-\"><a href=\"#44-alternation-\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4.4 Alternation (<code>|</code>)</h3>\n<p>The pipe symbol (<code>|</code>) acts like an \"OR\".</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/cat\\|dog/</code></td>\n<td align=\"left\">Matches either \"cat\" or \"dog\"</td>\n<td align=\"left\">\"cat\", \"dog\"</td>\n<td align=\"left\">\"bird\", \"catdog\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/(c\\|d)at/</code></td>\n<td align=\"left\">Matches either \"cat\" or \"dat\"</td>\n<td align=\"left\">\"cat\", \"dat\"</td>\n<td align=\"left\">\"bat\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>/gr(a\\|e)y/</code></td>\n<td align=\"left\">Matches \"gray\" or \"grey\"</td>\n<td align=\"left\">\"gray\", \"grey\"</td>\n<td align=\"left\">\"graey\"</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"5-anchors\"><a href=\"#5-anchors\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Anchors</h2>\n<p>Anchors assert the position within the string, but <em>don't</em> consume characters (zero-width assertions).</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Anchor</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Matches (bold)</th>\n<th align=\"left\">Does NOT Match (no bold)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>^</code></td>\n<td align=\"left\">Start of string (or line, in multiline mode)</td>\n<td align=\"left\"><code>/^Hello/</code></td>\n<td align=\"left\">\"<strong>Hello</strong> world\"</td>\n<td align=\"left\">\"Say Hello\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>$</code></td>\n<td align=\"left\">End of string (or line, in multiline mode)</td>\n<td align=\"left\"><code>/world$/</code></td>\n<td align=\"left\">\"Hello <strong>world</strong>\"</td>\n<td align=\"left\">\"world peace\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>^$</code></td>\n<td align=\"left\">Matches only an empty line</td>\n<td align=\"left\"><code>/^$/</code></td>\n<td align=\"left\">\"\", \"\\n\"</td>\n<td align=\"left\">\"a\" \" \"</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Example of combined start and end anchors:</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Example</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Matches</th>\n<th align=\"left\">Does NOT Match</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>/^Monday$/</code></td>\n<td align=\"left\">Will match \"Monday\" but only as the only content on the string.  This is useful for validation.</td>\n<td align=\"left\">\"Monday\"</td>\n<td align=\"left\">\" Monday\" or \"Monday \"</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"6-flags-modifiers\"><a href=\"#6-flags-modifiers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. Flags (Modifiers)</h2>\n<p>Flags modify the behavior of the regex engine. They are typically placed <em>after</em> the closing slash of the regex.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Flag</th>\n<th align=\"left\">Description</th>\n<th align=\"left\">Example</th>\n<th align=\"left\">Matches (without flag)</th>\n<th align=\"left\">Matches (with flag)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>g</code></td>\n<td align=\"left\"><strong>Global:</strong> Find <em>all</em> matches, not just the first one.</td>\n<td align=\"left\"><code>/a/g</code></td>\n<td align=\"left\">\"b<strong>a</strong>nana\"</td>\n<td align=\"left\">\"b<strong>a</strong>n<strong>a</strong>n<strong>a</strong>\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>i</code></td>\n<td align=\"left\"><strong>Case-insensitive:</strong>  Ignore case when matching.</td>\n<td align=\"left\"><code>/hello/i</code></td>\n<td align=\"left\">(no match)</td>\n<td align=\"left\">\"<strong>Hello</strong>\", \"<strong>hello</strong>\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>m</code></td>\n<td align=\"left\"><strong>Multiline:</strong>  Treat <code>^</code> and <code>$</code> as the start/end of each <em>line</em> (instead of the start/end of the entire string).</td>\n<td align=\"left\"><code>/^cat$/m</code></td>\n<td align=\"left\">(no match)</td>\n<td align=\"left\">\"<strong>cat</strong>\\ndog\\n<strong>cat</strong>\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>s</code></td>\n<td align=\"left\"><strong>Dotall (Single-line):</strong>  Makes the dot (<code>.</code>) match <em>any</em> character, <em>including</em> newline characters.</td>\n<td align=\"left\"><code>/a.b/s</code></td>\n<td align=\"left\">(no match if a and b are on different lines)</td>\n<td align=\"left\">\"a\\nb\"</td>\n</tr>\n<tr>\n<td align=\"left\"><code>u</code></td>\n<td align=\"left\"><strong>Unicode:</strong> Enable full Unicode support.  Important for working with characters outside the basic ASCII range.</td>\n<td align=\"left\"><code>/\\p{L}/u</code></td>\n<td align=\"left\">(May not match all Unicode letters without <code>u</code>)</td>\n<td align=\"left\">Matches all Unicode letters</td>\n</tr>\n<tr>\n<td align=\"left\"><code>y</code></td>\n<td align=\"left\"><strong>Sticky:</strong> Matches only from the index indicated by the <code>lastIndex</code> property of this regular expression in the target string (and does not attempt to match from any later indexes).</td>\n<td align=\"left\"><code>/foo/y</code></td>\n<td align=\"left\">\"<strong>foo</strong>bar\"</td>\n<td align=\"left\">(no match)</td>\n</tr>\n</tbody>\n</table>\n","tags":[{"title":"RegEx","path":"/tag/RegEx/"},{"title":"Frontend","path":"/tag/Frontend/"},{"title":"Backend","path":"/tag/Backend/"}]}},"context":{}}