{"hash":"8d284f39b8f7fd6ee6e44c532e30c7955b76a86b","data":{"post":{"title":"Open-Closed Principle in JavaScript and TypeScript","date":"January 5, 2020","content":"<p>In this series of Blog Posts, I will take a look at the SOLID Principles in the context of JavaScript and TypeScript.</p>\n<p><strong>SOLID</strong> is an acronym referring to the SOLID Principles of class design that were\npopularized by Robert C. Martin.</p>\n<p>Usually, these principles get applied to OOP\nlanguages that have classes. JavaScript is different in that it uses prototypal\ninheritance instead of classical inheritance. In the code samples, I will be\nusing the ES6 class syntax because I prefer the new syntax over the ES5 syntax.</p>\n<h2 id=\"the-open-closed-principle\"><a href=\"#the-open-closed-principle\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>THE OPEN-CLOSED PRINCIPLE</h2>\n<blockquote>\n<p>A software artifact should be open for extension but closed for modification.<br>\n<strong>Bertrand Meyer</strong></p>\n</blockquote>\n<p>Or alternatively</p>\n<blockquote>\n<p>You should be able to extend a classes behavior, without modifying it.<br>\n<strong>Robert C. Martin</strong></p>\n</blockquote>\n<p>The goal of software architecture is to make sure that changes to the software are easy to\nmake. The Open-Closed Principle (OCP) helps us with this goal in that it minimizes changes\nthat have to be made to working code.</p>\n<blockquote>\n<p>This goal is accomplished by partitioning the system into components, and arranging those\ncomponents into a dependency hierarchy that protects higher-level components from changes\nin lower-level components.<br>\n<strong>Robert C. Martin</strong></p>\n</blockquote>\n<p>This means that we should design a class that is closed to modifications, meaning that it will\nnot be changed, but also open, since new functionality can be added by <strong>extending</strong> this class.</p>\n<p>Let's look at a simple example:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">DecimalToBinary</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">  </span><span style=\"color: #616E88\">// Some other helper functions â€¦</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">dec2bin</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">parseInt</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">10</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">toString</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #B48EAD\">2</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<p>Let's say we have a web app that needed the functionality to convert from decimal to binary\nnumbers. We could implement a class like the DecimalToBinary class in the example above.\nBut what would happen if we suddenly need to also convert binary numbers to decimal numbers,\nor decimal to hexadecimal and so on?</p>\n<p>To do so, we would most likely modify the DecimalToBinary\nclass. This would violate the Open-Closed Principle.</p>\n<p>A better way would be to anticipate this change when designing the class in the first place:</p>\n<pre class=\"shiki\" style=\"background-color: #2e3440ff\"><code><span class=\"line\"><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">NumberConverter</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">isNumber</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">    </span><span style=\"color: #616E88\">// Just an example of a helper function</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">true;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">convertBase</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">fromBase</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">toBase</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">    </span><span style=\"color: #616E88\">// A naive implementation without error checking etc.</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">parseInt</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">fromBase</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">toString</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">toBase</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">DecimalToBinary</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">extends</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">NumberConverter</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">isDecimalNumber</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">    </span><span style=\"color: #616E88\">// Just an example of a helper function, not actual implementation</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">true;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">dec2bin</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">convertBase</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">10</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #81A1C1\">class</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">BinaryToDecimal</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">extends</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #8FBCBB\">NumberConverter</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">isBinaryNumber</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">    </span><span style=\"color: #616E88\">// Just an example of a helper function, not actual implementation</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">true;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #88C0D0\">bin2dec</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">)</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">this</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">convertBase</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">number</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">2</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">10</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></span>\n<span class=\"line\"><span style=\"color: #D8DEE9FF\">  </span><span style=\"color: #ECEFF4\">}</span></span>\n<span class=\"line\"><span style=\"color: #ECEFF4\">}</span></span></code></pre>\n<p>Now you can see that we were able to extend the functionality of our program\nwithout modifying any old code.</p>\n<p>This is obviously not the best example as this is a bit overkill and could\nalso just be solved by a simple function, but it's still a good way to demonstrate the OCP.</p>\n<h3 id=\"ocp-at-the-architectural-level\"><a href=\"#ocp-at-the-architectural-level\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OCP AT THE ARCHITECTURAL LEVEL</h3>\n<p>By using the OCP together with the <a href=\"https://carstenbehrens.com/single-responsibility-principle/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Single Responsibility Principle</a> to organize our components\nand the <a href=\"https://carstenbehrens.com/dependency-inversion-principle/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dependency Inversion Principle</a> to manage the dependencies you will naturally create a hierarchy of components.</p>\n<p>Higher-level components in that hierarchy are protected from changes made to low-level\ncomponents.</p>\n","tags":[{"title":"JavaScript","path":"/tag/JavaScript/"},{"title":"Software Design","path":"/tag/Software%20Design/"}]}},"context":{}}